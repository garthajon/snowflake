select current_user

USE ROLE ACCOUNTADMIN;
ALTER USER GARTHJON2 UNSET DEFAULT_SECONDARY_ROLES;

ALTER USER GARTHJON2 SET DEFAULT_SECONDARY_ROLES = ();

USE ROLE ACCOUNTADMIN;
GRANT DATABASE ROLE DB_ROLE_PROJECT2 TO ROLE DB_ROLE_PROJECT1;

USE ROLE DB_ROLE_PROJECT1;
SELECT COUNT(*) AS COUNTALL, USE_CONCEPT_ID FROM PATIENT_CONTACT
GROUP BY USE_CONCEPT_ID





USE ROLE ACCOUNTADMIN;
CREATE OR REPLACE DATABASE PRODUCER_SHARE_COMPASS
FROM SHARE CT32643.PROJECT1_SHARE;

USE ROLE ACCOUNTADMIN;
REVOKE DATABASE ROLE DB_ROLE_PROJECT2 FROM ROLE research_role2;
REVOKE DATABASE ROLE DB_ROLE_PROJECT2 FROM ROLE database_role;
USE ROLE ACCOUNTADMIN;
REVOKE IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS FROM ROLE DB_ROLE_PROJECT1;

-- on checking whether or not the shared database role is active in session
-- in theory it shouldn't be active until i explicitly grant

select IS_DATABASE_ROLE_IN_SESSION('DB_ROLE_PROJECT2');

select current_role()
SELECT IS_DATABASE_ROLE_IN_SESSION('DB_ROLE_PROJECT2');
SELECT CURRENT_SECONDARY_ROLES();
SELECT CURRENT_ROLE();
SHOW GRANTS TO DATABASE ROLE DB_ROLE_PROJECT2;
SHOW GRANTS TO USER GARTHJON2;
SHOW USERS LIKE 'GARTHJON2';
-- check for role nesting
SHOW GRANTS OF ROLE accountadmin;






USE ROLE ACCOUNTADMIN;
ALTER USER GARTHJON2 UNSET DEFAULT_SECONDARY_ROLES;
ALTER USER GARTHJON2 SET DEFAULT_SECONDARY_ROLES = ();


USE ROLE ACCOUNTADMIN;
REVOKE DATABASE ROLE DB_ROLE_PROJECT1 FROM ROLE PUBLIC;



USE ROLE research_role2;
SELECT COUNT(*) AS COUNTALL, USE_CONCEPT_ID FROM PATIENT_CONTACT
GROUP BY USE_CONCEPT_ID


use role accountadmin;
GRANT IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS TO ROLE DB_ROLE_PROJECT1;

use role accountadmin;
REVOKE IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS FROM ROLE DB_ROLE_PROJECT1;

use role accountadmin;
REVOKE IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS FROM ROLE PUBLIC;

use role accountadmin;
CREATE OR REPLACE DATABASE PRODUCER_SHARE_COMPASS
FROM SHARE CT32643.PROJECT1_SHARE;



USE ROLE RESEARCH_ROLE;
SELECT COUNT(*) AS COUNTALL, USE_CONCEPT_ID FROM PATIENT_CONTACT
GROUP BY USE_CONCEPT_ID

USE ROLE ACCOUNTADMIN;
REVOKE USAGE ON DATABASE producer_share_compass FROM ROLE PUBLIC;
REVOKE USAGE ON SCHEMA shared_db.schema_name FROM ROLE PUBLIC;
REVOKE SELECT ON ALL TABLES IN SCHEMA shared_db.schema_name FROM ROLE PUBLIC;


show roles;


SHOW GRANTS TO ROLE DB_ROLE_PROJECT1;

USE ROLE ACCOUNTADMIN;
SHOW GRANTS TO ROLE PUBLIC;

-- THE FOLLOWING COMMAND REMOVES ALL PERMISSIONS/ACCESS TO THE SHARED DATABASE

USE ROLE ACCOUNTADMIN;
REVOKE IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS FROM ROLE DB_ROLE_PROJECT1;

USE ROLE ACCOUNTADMIN;
REVOKE IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS FROM ROLE PUBLIC;


GRANT IMPORTED PRIVILEGES ON DATABASE PRODUCER_SHARE_COMPASS TO ROLE DB_ROLE_PROJECT1;


USE ROLE ACCOUNTADMIN;
CREATE OR REPLACE ROLE RESEARCH_ROLE2;
-- get the details of the current user
--select current_user()
-- grant the role to the current user
GRANT ROLE RESEARCH_ROLE2 TO USER GARTHJON2;




REVOKE DATABASE ROLE DB_ROLE_PROJECT1 FROM ROLE DB_ROLE_PROJECT1;

REVOKE DATABASE ROLE DB_ROLE_PROJECT1 FROM ROLE PUBLIC;


SELECT *
FROM SNOWFLAKE.ACCOUNT_USAGE.GRANTS_TO_ROLES
WHERE 
--
--NAME != 'SNOWFLAKE_LEARNING_ROLE'
--AND GRANTED_TO = 'ACCOUNTADMIN'
GRANTED_TO = 'ROLE'
AND 
GRANTEE_NAME = 'DB_ROLE_PROJECT1'
-- GRANTEE RECEIVES THE PRIVILEDGE
ORDER BY GRANTEE_NAME